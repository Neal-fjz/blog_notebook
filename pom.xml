<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- 父工程引入 SpringBoot Parent依赖 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!--工程中默认定义的或自己定义的属性,例如一些版本信息-->
    <groupId>com.opensource</groupId>
    <artifactId>blog_notebook</artifactId>
    <version>0.0.2</version>
    <name>blog_notebook</name>
    <description>blog_notebook</description>
    <!--父工程默认的打包方式pom方式-->
    <packaging>pom</packaging>

    <!-- 这个元素是自动添加的,创建当前工程下的子工程时,会自动添加此元素 -->
    <modules>
        <module>gateway</module>
        <module>user-service</module>
        <module>blog-service</module>
    </modules>

    <!-- 具体的配置项，编码类型，jdk版本,依赖包的版本等等信息都可以写在这里 -->
    <properties>
        <java.version>1.8</java.version>
        <spring.boot.version>2.6.4</spring.boot.version>
        <spring-cloud.version>2021.0.1</spring-cloud.version>
        <spring-cloud-alibaba.version>2.2.5.RELEASE</spring-cloud-alibaba.version>
        <mysql.version>8.0.21</mysql.version>
        <redis.version>4.1.1</redis.version>
        <druid.version>1.2.8</druid.version>
        <mybatis-plus.version>3.5.1</mybatis-plus.version>
        <sa-token.version>1.29.0</sa-token.version>
        <hutool.version>5.7.21</hutool.version>
        <lombok.version>1.18.22</lombok.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <!-- 父工程引入 公告依赖
         通过dependencyManagement来管理jar包的版，让子项目中引用一个依赖不用显示列出的版本号，
         maven 会沿着父子层次向上走，直到找到拥有dependencyManagement的项目，
         并使用dependencyManagement中指定的版本号,
         这样等版本号升级了 只需要在父类更改一处版本号其他地方处处也跟着生效,这种聚合同一管理模式非常方便.
     -->
    <dependencyManagement>
        <dependencies>
            <!--Spring boot 依赖(微服务基础)-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <scope>import</scope>   <!-- 这里的import表示在其它工程中需要时直接可以引用 -->
                <type>pom</type>        <!-- 假如依赖的scope属性值为scope,则type类型必须为pom -->
            </dependency>

            <!-- SpringCloud 依赖 (定义了微服务规范) -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <scope>import</scope>   <!-- 这里的import表示在其它工程中需要时直接可以引用 -->
                <type>pom</type>        <!-- 假如依赖的scope属性值为scope,则type类型必须为pom -->
            </dependency>

            <!-- SpringCloud alibaba 依赖 (基于spring微服务规范做了具体落地实现)-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <scope>import</scope>   <!-- 这里的import表示在其它工程中需要时直接可以引用 -->
                <type>pom</type>        <!-- 假如依赖的scope属性值为scope,则type类型必须为pom -->
            </dependency>

            <!-- mybatis-plus 依赖 -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <!-- mybatis-plus 代码构造器-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-generator</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <!-- mysql驱动 依赖-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>

            <!-- Druid连接池 依赖 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!-- Sa-Token 权限认证, 在线文档：http://sa-token.dev33.cn/ -->
            <dependency>
                <groupId>cn.dev33</groupId>
                <artifactId>sa-token-spring-boot-starter</artifactId>
                <version>${sa-token.version}</version>
            </dependency>
            <!-- Sa-Token 权限认证,gateway 专用依赖 -->
            <dependency>
                <groupId>cn.dev33</groupId>
                <artifactId>sa-token-reactor-spring-boot-starter</artifactId>
                <version>${sa-token.version}</version>
            </dependency>
            <!-- Sa-Token 整合 Redis  -->
            <dependency>
                <groupId>cn.dev33</groupId>
                <artifactId>sa-token-dao-redis-jackson</artifactId>
                <version>${sa-token.version}</version>
            </dependency>

            <!-- HuTool 文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类 -->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>

            <!-- lombok 依赖 -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <!-- 在父工程中统一引入在所有微服务中会用到的依赖,如果只是部分微服务用到,就单独在微服务中引入,不要在父工程中引入,否则可能引起错误,特别是数据库基础依赖 -->
    <dependencies>
        <!-- lombok 依赖 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- 热部署依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
